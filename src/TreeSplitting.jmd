# Efficient random splits in labelled trees #

During an implemenation of genetic programming over decision trees, I encountered an interesting
problem: how to implementa a purely functional way of randomly splitting trees?  By that, I mean a
function `randomsplit`, such that `randomsplit(f, t)` returns a tuple `(t′, s)`, where `s` is a
random subtree of `t`, and `t′` is `t` with `s` replaced by `f(s)` (i.e., the “new” tree and the old
subtree).


## Preparations ##

Assume we have the following definition of binary trees, with labelled leaves:

```julia
abstract type Tree{N} end

struct Leaf{N} <: Tree{N}
    label::Int
    
    Leaf{N}(n) where N = (1 <= n <= N) ? new{N}(n) : error("Illegal construction")
end

struct Branch{N} <: Tree{N}
    left::Tree{N}
    right::Tree{N}
end
```

The type parameter `N` constrains the range of labels (for the decision trees, `N` was the number of
decision variables).

First, some pretty printing function for this kind of tree:

```{julia; results = "hidden"}
import Base: show

function show(io::IO, l::Leaf, indent = 0)
    print(io, " " ^ indent, "Leaf($(l.label))")
end

function show(io::IO, b::Branch, indent = 0)
    print(io, " " ^ indent)
    print(io, "Branch(\n")
    show(io, b.left, indent + 2)
    print(io, ",\n")
    show(io, b.right, indent + 2)
    print(io, ")")
end
```

Now we can look at some examples:

```{julia; tangle = false}
const t = Branch{4}(Branch{4}(Leaf{4}(1), Leaf{4}(2)), Leaf{4}(4))
```

```{julia; tangle = false}
const t2 = Branch{4}(Leaf{4}(1), Leaf{4}(2))
```

I also [implemented](boltzmannsampler.jl) sampling of random trees using a [Boltzmann
sampler](https://byorgey.wordpress.com/2013/04/25/random-binary-trees-with-a-size-limited-critical-boltzmann-sampler-2/),
which generates trees of an expected size in a certain range.

```{julia; echo = false; results = "hidden"}
import Base: rand
using Random: AbstractRNG, Sampler, SamplerType

rand(rng::AbstractRNG, ::SamplerType{Leaf{N}}) where {N} = Leaf{N}(rand(rng, 1:N))

"""
    BoltzmannSampler{N}(m, n)
Configuration for Boltzmann sampling `DecisionTree{N}`s with minimum size `m` and maximum size `n`.
"""
struct BoltzmannSampler{N} <: Sampler{Tree{N}}
    minsize::Int
    maxsize::Int
end

function boltzmann_ub(rng::AbstractRNG, sampler::BoltzmannSampler{N}, cursize) where {N}
    minsize = sampler.minsize
    maxsize = sampler.maxsize

    if cursize ≥ maxsize        # maximum bound exceeded
        return nothing, cursize
    elseif rand(rng) ≤ 0.5      # generate random leaf
        return rand(rng, Leaf{N}), cursize
    else                        # try generating a branch -- if its size is small enough
        # try generating children, or immediately fail
        left_children, cursize = boltzmann_ub(rng, sampler, cursize + 1)
        left_children === nothing && return nothing, cursize

        right_children, cursize = boltzmann_ub(rng, sampler, cursize + 1)
        right_children === nothing && return nothing, cursize

        # `cursize` is now the size of the whole thing, and less than maxsize
        return Branch{N}(left_children, right_children), cursize        
    end
end

function rand(rng::AbstractRNG, sampler::BoltzmannSampler{N}) where {N}
    candidate, size = boltzmann_ub(rng, sampler, 0)
    while candidate === nothing || size ≤ sampler.minsize
        candidate, size = boltzmann_ub(rng, sampler, 0)
    end

    return candidate
end
```

```{julia; tangle = false}
tlarge = rand(BoltzmannSampler{4}(10, 20))
println(tlarge)
```

## Naive splitting ##

The idea to select and change a random sub-tree is to use [reservoir
sampling](https://stackoverflow.com/a/3272490/1346276) of continuations.  That is, we iterate over
all nodes in the tree, and at each $n$th node, select with probability $1/n$ a function which knows
how to change the current node (and return the original).  In the example `t2` from above, this
would in principle be the following functions:

```{julia; eval = false; tangle = false}
k -> (Branch(k(Leaf(1)), Leaf(2)), Leaf(1))
k -> (Branch(Leaf(1), k(Leaf(2))), Leaf(2))
k -> (k(Branch(Leaf(1), Leaf(2))), Branch(Leaf(1), Leaf(2)))
```

We call this function the “continuation” at the node.  To efficiently preserve the knowledge about
tree structure while recursively traversing it, we also remember at each step the “context” – a
function building up the tree to the current point.  The contexts of `t2` are

```{julia; eval = false; tangle = false}
t -> Branch(t, Leaf(2))
t -> Branch(Leaf(1), t)
t -> t
```

Now the continuation at each node `t`, given `context`, can locally be defined as

```{julia; eval = false; tangle = false}
k -> (context(k(t)), t)
```

The following functions implement this technique, using anonymous functions for contexts and
continuations:

```{julia; results = "hidden"}
function randomsplitnaive_impl(l::Leaf, n, context, continuation)
    n += 1
    if rand() ≤ 1/n
        continuation = k -> (context(k(l)), l)
    end

    return continuation, n
end

function randomsplitnaive_impl(b::Branch, n, context, continuation)
    continuation, n = randomsplitnaive_impl(b.left, 
                                            n,
                                            t -> context(Branch(t, b.right)),
                                            continuation)
    continuation, n = randomsplitnaive_impl(b.right, 
                                            n,
                                            t -> context(Branch(b.left, t)),
                                            continuation)

    n += 1
    if rand() ≤ 1/n
        continuation = k -> (context(k(b)), b)
    end
    
    return continuation, n
end
```

With these internal implementations, we can define the following function for the user, which works
by calling the sampled continuation on a provided `action`:


```{julia; results = "hidden"}
"""
    randomsplitnaive(action, t::Tree)
Select uniformly at random a subtree `s` of `t`, then replace `s` by `action(s)`. 
Returns both the new tree and the replaced subtree.
"""
function randomsplitnaive(action, t::Tree)
    # The continuation argument will be assigned a default with probability 1 on the first leaf,
    # so passing `nothing` is safe here.
    cont, _ = randomsplitnaive_impl(t, 0, identity, nothing)
    cont(action)
end
```

Given this, we can define a trivial variant ignoring the substitution and just returning the (now
randomly sampled) subtree:

```{julia; results = "hidden"}
randomchildnaive(t::Tree) = randomsplitnaive(identity, t)[2]
```

```{julia; tangle = false}
[randomchildnaive(tlarge) for _ in 1:10]
```

To test for a uniform distribution of splits, we use some hackish “hashing” by summation: we sum the
the labels of the tree, and based on that, create a histogram of the resulting numbers:

```julia
sumtree(t::Leaf) = t.label
sumtree(t::Branch) = sumtree(t.left) + sumtree(t.right)

function testvalues_native(t, N)
    zd = [sumtree(randomchildnaive(t)) for _ in 1:N]
    [(i, sum(zd .== i)) for i in unique(zd)]
end
```

```{julia; tangle = false}
testvalues_native(t, 1000)
```

As can be seen, the distribution is pretty uniform.


## Optimizing the implementation ##

### Diagnose ###

The above works reasonably well, but it has a performance problem, which you can see if you run the
following (where we compare to the final variant):

```{eval = false; tangle = false}
julia> @btime randomchildnaive($(rand(BoltzmannSampler{5}(1000, 1100))));
  970.278 μs (3318 allocations: 84.02 KiB)
  
julia> @btime randomchild($(rand(BoltzmannSampler{5}(1000, 1100))));
  25.717 μs (2136 allocations: 66.75 KiB)
```

In Julia versions below 1.0, this was even more extreme.  The problem is that we recurlively call
anonymous functions of different type structure, which leads to compilation of extremely nested
types.  We can see this when we look at an example from the stack trace of an interrupted execution:

```{eval = false; tangle = false}
Stacktrace:
 [1] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:87 (repeats 2 times)
 [2] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}}}}}}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:91 (repeats 2 times)
 [3] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}}}}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:87 (repeats 3 times)
 [4] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:91 (repeats 2 times)
 [5] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:87 (repeats 2 times)
 [6] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:91 (repeats 2 times)
 [7] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:87
 [8] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:91
 [9] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:87
 [10] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:91 (repeats 2 times)
 [11] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:87
 [12] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:91 (repeats 2 times)
 [13] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:87
 [14] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:91 (repeats 2 times)
 [15] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##9#12")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:87 (repeats 2 times)
 [16] randomsplitnaive_impl(::Branch{50}, ::Int64, ::getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##10#13")){Branch{50},getfield(Main, Symbol("##9#12")){Branch{50},typeof(identity)}}}}, ::Function) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:91 (repeats 4 times)
 [17] randomsplitnaive_impl(::Branch{50}, ::Int64, ::typeof(identity), ::Nothing) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:87
 [18] randomsplitnaive(::Function, ::Branch{50}) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:113
 [19] randomchildnaive(::Branch{50}) at /home/philipp/git/TreeSplitting/src/TreeSplitting.jl:118
 [20] top-level scope at none:0
```

### Solution ###

To remove these issues, we should note that the source of the problem are the “unstable” types of
the arguments `context` and `continuation` of the `randomsplitnaive_impl` function.  They result in
being built up of nested closures, for which at every recursion level, a new type is inferred.

To solve this, we should realize that the used anonymous functions are of a very simple and
repeating structure.  For `context`s, there are the following options:

```{julia; eval = false; tangle = false}
t -> context(Branch(t, b.right))
t -> context(Branch(b.left, t))
```

while `continuation`s always have the structure

```{julia; eval = false; tangle = false}
k -> (context(k(b)), b)
```

Looking at these closures, we can factor out the relevant information into their own types:

```julia
# Context types:
abstract type Context{N} end

struct LeftContext{N} <: Context{N}
    right::Tree{N}
    parent::Context{N}
end

struct RightContext{N} <: Context{N}
    left::Tree{N}
    parent::Context{N}
end

# This will be used instead of `nothing` in the top-level call
struct NoContext{N} <: Context{N} end


# Continuation type:
struct Cont{N}
    context::Context{N}
    chunk::Tree{N}
end

```

Now we can see that `Context` is actually just a [zipper](https://wiki.haskell.org/Zipper) for the
`Tree` type. 

Then we just have to overload the calling operators of these types to make them work like the
anonymous functionsa above:

```julia

function (context::RightContext{N})(t::Tree{N}) where N
    context.parent(Branch(context.left, t))
end

function (context::LeftContext{N})(t::Tree{N}) where N
    context.parent(Branch(t, context.right))
end

function (context::NoContext{N})(t::Tree{N}) where N
    t
end

function (continuation::Cont{N})(k::Function) where N
    newchunk = k(continuation.chunk)::Tree{N}
    tree = continuation.context(newchunk)::Tree{N}
    return tree, continuation.chunk
end
```

Given this, it is easy, to rewrite `randomsplitnaive` in a more type-stable form as follows – in
fact, this it results in simpler code:

```julia
function randomsplit_impl(t::Leaf{N}, n::Int, context::Context{N}, continuation::Cont{N}) where {N}
    n += 1
    if rand() ≤ 1/n
        return Cont{N}(context, t), n
    else
        return continuation, n
    end
end

function randomsplit_impl(t::Branch{N}, n::Int, context::Context{N}, continuation::Cont{N}) where {N}
    c1, n = randomsplit_impl(t.left, n, LeftContext{N}(t.right, context), continuation)
    c2, n = randomsplit_impl(t.right, n, RightContext{N}(t.left, context), c1)
    
    n += 1
    if rand() ≤ 1/n
        return Cont{N}(context, t), n
    else
        return c2, n
    end
end

function randomsplit(action, t::Tree{N}) where {N}
    default_context = NoContext{N}()
    cont, _ = randomsplit_impl(t, 0, default_context, Cont{N}(default_context, t))
    cont(action)
end

randomchild(t::Tree{N}) where {N} = randomsplit(identity, t)[2]
```

Again, we can test whether the random children are distributed about uniformly:

```julia
function testvalues(t, N)
    zd = [sumtree(randomchild(t)) for _ in 1:N]
    [(i, sum(zd .== i)) for i in unique(zd)]
end
```

```{julia; tangle = false}
testvalues(t, 1000)
```

